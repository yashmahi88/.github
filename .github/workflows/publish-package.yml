name: Publish Package

on:
  workflow_call:
    inputs:
      nexus_username:
        required: true
        type: string
      nexus_password:
        required: true
        type: string
      nexus_api_key:
        required: true
        type: string
      sonar_token:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

      - name: Set package name and version 
        id: set_name
        run: |
          echo "Checking GITHUB_REF: $GITHUB_REF"
          FOLDER_NAME="nexus-git-development"

          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"

            git fetch origin master
            MASTER_COMMIT=$(git rev-parse origin/master)

            TAG_COMMIT=$(git rev-parse "${GITHUB_REF}")

            if [[ "$TAG_COMMIT" == "$MASTER_COMMIT" ]]; then
              export PACKAGE_ID="nexus-git-${TAG_NAME}"
              export PACKAGE_VERSION="${TAG_NAME}"
            else
              echo "Error: Tags must be created on the master branch."
              exit 1
            fi
          elif [[ "${GITHUB_REF}" == "refs/heads/development" ]]; then
            export PACKAGE_ID="${FOLDER_NAME}.nexus-git"
            export PACKAGE_VERSION="1.0.0-${GITHUB_RUN_ID}"
          elif [[ "${GITHUB_REF}" == "refs/heads/release" ]]; then
            COMMIT_ID=$(echo "${GITHUB_SHA}" | cut -c1-6)
            export PACKAGE_ID="nexus-git-1.0.0-release-${COMMIT_ID}"
            export PACKAGE_VERSION="1.0.0-release-${COMMIT_ID}"
          elif [[ "${GITHUB_REF}" == "refs/heads/master" ]]; then
            exit 1
          fi 

          echo "PACKAGE_ID=${PACKAGE_ID}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

      - name: Pack project
        run: |
          echo "Packaging with version: $PACKAGE_VERSION"
          dotnet pack --configuration Release --output ./bin/Release \
            /p:CustomPackageId=$PACKAGE_ID \
            /p:PackageVersion=$PACKAGE_VERSION
          ARTIFACT_PATH="./bin/Release/${PACKAGE_ID}.${PACKAGE_VERSION}.nupkg"
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> $GITHUB_ENV

      - name: Upload Package as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: nuget-package
          path: ${{ env.ARTIFACT_PATH }}

  sonar_scan:
    runs-on: windows-latest
    needs: build  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2 
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ inputs.github_token }}  
          SONAR_TOKEN: ${{ inputs.sonar_token }}   
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"yashmahi88_nexus-git" /o:"yashmahi0404" /d:sonar.token="${{ inputs.sonar_token }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ inputs.sonar_token }}"

      - name: Check Quality Gate
        run: |
            sleep 5  
            PROJECT_KEY="yashmahi88_nexus-git"  
            QUALITY_GATE_STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${PROJECT_KEY}")           
            echo "Quality Gate Status Response: $QUALITY_GATE_STATUS"           
            PROJECT_STATUS=$(echo "$QUALITY_GATE_STATUS" | jq -r '.projectStatus.status')            
            ALL_CONDITIONS_OK=$(echo "$QUALITY_GATE_STATUS" | jq -r '.projectStatus.conditions | all(.status == "OK")')
            if [[ "$PROJECT_STATUS" != "OK" || "$ALL_CONDITIONS_OK" != "true" ]]; then
              echo "Quality Gate failed. Stopping the workflow."
              exit 1
            else
              echo "Quality Gate passed."
            fi
        shell: bash

  push_to_nexus_tag:
    runs-on: ubuntu-latest
    needs: sonar_scan
    if: startsWith(github.ref, 'refs/tags/')
    environment: nexus-approval
    steps:
      - name: Download Package Artifact
        uses: actions/download-artifact@v3
        with:
          name: nuget-package
          path: ./bin/Release

      - name: List files in Release directory
        run: ls -al ./bin/Release

      - name: Push to Nexus Repository (Tag)
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_API_KEY: ${{ secrets.NEXUS_API_KEY }}
        run: |
          echo "Pushing to Nexus repository for tag: http://52.187.94.85:8081/repository/nuget-tag"
          dotnet nuget push ./bin/Release/*.nupkg --source http://52.187.94.85:8081/repository/nuget-tag --api-key $NEXUS_API_KEY

  push_to_nexus_branch:
    runs-on: ubuntu-latest
    needs: sonar_scan
    if: github.ref == 'refs/heads/development' || github.ref == 'refs/heads/release'
    steps:
      - name: Download Package Artifact
        uses: actions/download-artifact@v3
        with:
          name: nuget-package
          path: ./bin/Release

      - name: List files in Release directory
        run: ls -al ./bin/Release

      - name: Push to Nexus Repository (Branch)
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_API_KEY: ${{ secrets.NEXUS_API_KEY }}
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/development" ]]; then
            NEXUS_SOURCE="http://52.187.94.85:8081/repository/nuget-snapshot"
          elif [[ "${GITHUB_REF}" == "refs/heads/release" ]]; then
            NEXUS_SOURCE="http://52.187.94.85:8081/repository/nuget-rc"
          fi
          echo "Pushing to Nexus repository: $NEXUS_SOURCE"
          dotnet nuget push ./bin/Release/*.nupkg --source $NEXUS_SOURCE --api-key $NEXUS_API_KEY