name: Reusable SonarQube Cloud Scan

on:
  workflow_call:
    inputs:
      LANGUAGE:
        description: 'Programming LANGUAGE (node, react, java, dotnet)'
        required: true
        type: string
      PROJECT_KEY:
        required: true
        type: string
      PROJECT_ORG:
        required: true
        type: string
    secrets:
      SONAR_TOKEN:
        required: true
      TOKEN_GIT:
        required: true

jobs:
  sonarcloud:
    runs-on: ${{ inputs.LANGUAGE == 'dotnet' && 'windows-latest' || 'ubuntu-latest' }}
    

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up SonarQube Scanner for Node/React
        if: ${{ inputs.LANGUAGE == 'node' || inputs.LANGUAGE == 'react' }}
        run: |
            echo "sonar.projectKey=${{ inputs.PROJECT_KEY }}" >> sonar-project.properties
            echo "sonar.organization=${{ inputs.PROJECT_ORG }}" >> sonar-project.properties
            cat sonar-project.properties
      # Node/React Sonar Scan
      - name: SonarQube Scan for Node/React
        if: ${{ inputs.LANGUAGE == 'node' || inputs.LANGUAGE == 'react' }}
        uses: SonarSource/sonarcloud-github-action@master
        env:
          TOKEN_GIT: ${{ secrets.TOKEN_GIT }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Check Quality Gate for Node/React
        if: ${{ inputs.LANGUAGE == 'node' || inputs.LANGUAGE == 'react' }}
        run: |
          sleep 5
          PROJECT_KEY=$(echo "yashmahi88_node-code" | tr -d '[:space:]')
          QUALITY_GATE_STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${PROJECT_KEY}")
          echo "Quality Gate Status Response: $QUALITY_GATE_STATUS"

          PROJECT_STATUS=$(echo "$QUALITY_GATE_STATUS" | jq -r '.projectStatus.status')
          ALL_CONDITIONS_OK=$(echo "$QUALITY_GATE_STATUS" | jq -r '.projectStatus.conditions | all(.status == "OK")')

          echo "Project Status: $PROJECT_STATUS"
          echo "All Conditions OK: $ALL_CONDITIONS_OK"

          if [[ "$PROJECT_STATUS" != "OK" || "$ALL_CONDITIONS_OK" != "true" ]]; then
            echo "Quality Gate failed. Stopping the workflow."
            exit 1
          else
            echo "Quality Gate passed."
          fi


      # Java Sonar Scan
      - name: Set up JDK for Java
        if: ${{ inputs.LANGUAGE == 'java' }}
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: zulu
      - name: Build and Analyze Java
        if: ${{ inputs.LANGUAGE == 'java' }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=yashmahi88_java_project
        env:
          TOKEN_GIT: ${{ secrets.TOKEN_GIT }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Check Quality Gate for Java
        if: ${{ inputs.LANGUAGE == 'java' }}
        run: |
          sleep 5
          PROJECT_KEY="yashmahi88_java_project"
          QUALITY_GATE_STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${PROJECT_KEY}")
          echo "Quality Gate Status Response: $QUALITY_GATE_STATUS"
          PROJECT_STATUS=$(echo "$QUALITY_GATE_STATUS" | jq -r '.projectStatus.status')
          ALL_CONDITIONS_OK=$(echo "$QUALITY_GATE_STATUS" | jq -r '.projectStatus.conditions | all(.status == "OK")')
          if [[ "$PROJECT_STATUS" != "OK" || "$ALL_CONDITIONS_OK" != "true" ]]; then
            echo "Quality Gate failed. Stopping the workflow."
            exit 1
          else
            echo "Quality Gate passed."
          fi

      # Dotnet Sonar Scan
      - name: Set up Dotnet Environment for Dotnet
        if: ${{ inputs.LANGUAGE == 'dotnet' }}
        shell: pwsh
        run: dotnet tool install --global dotnet-sonarscanner
      - name: Build and Analyze Dotnet
        if: ${{ inputs.LANGUAGE == 'dotnet' }}
        shell: pwsh
        run: |
          dotnet-sonarscanner begin /k:"${{ inputs.PROJECT_KEY}}" /o:"${{ inputs.PROJECT_ORG }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          dotnet build
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      - name: Check Quality Gate for Dotnet
        if: ${{ inputs.LANGUAGE == 'dotnet' }}
        shell: bash
        run: |
          sleep 5
          PROJECT_KEY="${{ inputs.PROJECT_KEY}}"
          QUALITY_GATE_STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${PROJECT_KEY}")
          echo "Quality Gate Status Response: $QUALITY_GATE_STATUS"
          PROJECT_STATUS=$(echo "$QUALITY_GATE_STATUS" | jq -r '.projectStatus.status')
          ALL_CONDITIONS_OK=$(echo "$QUALITY_GATE_STATUS" | jq -r '.projectStatus.conditions | all(.status == "OK")')
          if [[ "$PROJECT_STATUS" != "OK" || "$ALL_CONDITIONS_OK" != "true" ]]; then
            echo "Quality Gate failed. Stopping the workflow."
            exit 1
          else
            echo "Quality Gate passed."
          fi